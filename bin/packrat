#!/usr/bin/env ruby

require "yaml"

config_path = ARGV[0]
name = ARGV[1]

unless File.exists? config_path
  print "#{config_path} does not exist!"
  exit
end

config = YAML::load_file(config_path)

unless config["modules"] and config["modules"].respond_to? :each
  print "Config file requires a 'module' array"
  exit
end

if name.nil?
  current_user = `whoami`.strip
  print "Please provide a username [#{current_user}]: \n"
  name = $stdin.gets.strip
  name = current_user if name.empty?
end

config["modules"].each do |mod|
  next unless mod["git"]
  
  git_path_possibly_with_protocol = mod["git"]
  
  git_path_possibly_with_protocol = mod["git"]
  parts = git_path_possibly_with_protocol.split('://')
  
  protocol = parts.shift + '://' if parts.length > 1  
  git_path_without_protocol = parts.join('')
  
  full_git_path = "#{name}@#{git_path_without_protocol}"
  full_git_path = full_git_path.insert(0, protocol) if protocol
  
  if mod["path"]
    repo_path = mod["path"]
  else
    repo_name = File.basename mod["git"], '.git'
    repo_path = File.join 'modules/', repo_name
  end

  if File.directory? repo_path
    Dir.chdir repo_path do
      print "Pulling from #{full_git_path} into #{repo_path} \n"
      `git pull #{full_git_path} master`
    end
  else
    print "Cloning #{full_git_path} into #{repo_path} \n"
    `git clone #{full_git_path} #{repo_path}`
  end
  
  Dir.chdir repo_path do
    if (mod["ref"] || mod["tag"])
      `git checkout #{mod["ref"] || mod["tag"]}`
    elsif mod["branch"]
      branch = mod["branch"]
      out = `git checkout #{branch}`
      unless $?.exitstatus == 0
        `git checkout --track -b #{branch} origin/#{branch}`
      end
    end
  end

end if config["modules"].respond_to? :each